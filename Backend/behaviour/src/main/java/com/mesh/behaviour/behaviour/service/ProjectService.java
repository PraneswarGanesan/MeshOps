package com.mesh.behaviour.behaviour.service;

import com.mesh.behaviour.behaviour.dto.EnsureProjectRequest;
import com.mesh.behaviour.behaviour.model.Project;
import com.mesh.behaviour.behaviour.repository.ProjectRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
public class ProjectService {

    private final ProjectRepository projects;
    private final S3Service s3;

    private static final String DEFAULT_METRICS_JSON = "{ \"status\": \"init\" }";
    private static final String DEFAULT_RETRAIN_JSON = "{ \"status\": \"base\" }";
    private static final String DEFAULT_DRIVER = "# placeholder driver.py (will be generated by PlanService)";
    private static final String DEFAULT_TESTS = """
        tests:
          - name: "Main run"
            run: "python driver.py --base_dir=<dir>"
            assert_stdout_contains:
              - "Model trained and saved to"
              - "Predictions generated."
              - "Evaluation metrics:"
            assert_file_exists:
              - "<dir>/model.pkl"
              - "<dir>/tests.csv"
        """;

    @Transactional
    public Project ensure(EnsureProjectRequest req) {
        return projects.findByUsernameAndProjectName(req.getUsername(), req.getProjectName())
                .orElseGet(() -> {

                    // --- Normalize prefix ---
                    String incoming = req.getS3Prefix().trim();
                    if (incoming.startsWith("s3://")) {
                        incoming = incoming.substring(5); // strip scheme
                    }

                    String bucket = s3.getBucketName().trim();
                    if (!incoming.startsWith(bucket + "/")) {
                        throw new IllegalArgumentException("s3Prefix must start with s3://" + bucket + "/");
                    }

                    // strip bucket â†’ baseKey
                    String baseKey = incoming.substring(bucket.length() + 1);
                    if (!baseKey.isEmpty() && !baseKey.endsWith("/")) {
                        baseKey += "/";
                    }

                    String versionPath = baseKey + "artifacts/versions/v0/";

                    // --- Bootstrap minimal artifacts if missing ---
                    if (!s3.exists(versionPath + "metrics.json")) {
                        if (s3.exists(baseKey + "pre-processed/dataset.csv")) {
                            s3.copy(baseKey + "pre-processed/dataset.csv", versionPath + "base_dataset.csv");
                        }
                        s3.putString(versionPath + "metrics.json", DEFAULT_METRICS_JSON, "application/json");
                        s3.putString(versionPath + "retrain_report.json", DEFAULT_RETRAIN_JSON, "application/json");
                        s3.putString(versionPath + "driver.py", DEFAULT_DRIVER, "text/x-python");
                        s3.putString(baseKey + "tests/tests.yaml", DEFAULT_TESTS, "text/yaml");
                    }

                    // --- Save project ---
                    Project p = Project.builder()
                            .username(req.getUsername())
                            .projectName(req.getProjectName())
                            .s3Prefix("s3://" + bucket + "/" + baseKey) // normalized
                            .driverKey(versionPath + "driver.py")
                            .testsKey(baseKey + "tests/tests.yaml")
                            .approved(false)
                            .currentVersion(0)
                            .build();

                    return projects.save(p);
                });
    }
}
